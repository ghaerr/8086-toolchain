# To use this Makefile on ELKS, copy the toolchain and basic headers to ELKS /root
# Also have example files on /root, and ensure /etc/profile is PATH=.:/bin
# Then type "make"
#
# To do this execute the following before creating the image on the host:
#   cd ELKS/libc
#   cp libc/include/c86/stdarg.h ELKS/elkscmd/rootfs_template/root
#   cp libc/include/c86/stddef.h ELKS/elkscmd/rootfs_template/root
#   cp libc/libc86.a             ELKS/elkscmd/rootfs_template/root
#   cd 8086-toolchain
#   cp elks-bin/*                ELKS/elkscmd/rootfs_template/root
#                               (delete nasm86 and ndisasm86 if too big)
#   cp examples/*.c examples/*.h ELKS/elkscmd/rootfs_template/root
#   cp examples/Makefile.elks    ELKS/elkscmd/rootfs_template/root/Makefile
#   cd ELKS
#   make kimage (quickly builds image)

#TOPDIR=/root/elks
#INCLUDES=-I$(TOPDIR)/libc/include -I$(TOPDIR)/elks/include -I$(C86LIB)/include
#C86LIB=/root/libc

C86LIB=.
INCLUDES=-I.

CPP=cpp86
CC=c86
AS=as86
LD=ld86

DEFINES=
#DEFINES=-DNANOPRINTF_IMPLEMENTATION -DNANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS=0 -DNANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS=0 -DNANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS=0 -DNANOPRINTF_USE_LARGE_FORMAT_SPECIFIERS=0 -DNANOPRINTF_USE_BINARY_FORMAT_SPECIFIERS=0 -DNANOPRINTF_USE_WRITEBACK_FORMAT_SPECIFIERS=0

CPPFLAGS=-0 $(INCLUDES) $(DEFINES)
CFLAGS=-g -O -bas86 -separate=yes -warn=4 -lang=c99 -align=yes -stackopt=minimum -peep=all -stackcheck=no
#ASFLAGS=-0 -j -O -w-
ASFLAGS=-0 -j -V
LDFLAGS=-0 -i -L$(C86LIB)

##### End of standardized section #####

all: chess test  show_fonts vga

show_fonts: show_fonts.o
	time $(LD) $(LDFLAGS) show_fonts.o -o show_fonts

show_fonts.o: show_fonts.s
	time $(AS) $(ASFLAGS) show_fonts.s -o show_fonts.o

test: test.o cprintf.o
	time $(LD) $(LDFLAGS) test.o cprintf.o -lc86 -o test

test.o: test.as
	time $(AS) $(ASFLAGS)  test.as -o test.o

test.as: test.i
	time $(CC) $(CFLAGS) test.i test.as

test.i: test.c
	time $(CPP) $(CPPFLAGS) test.c -o test.i

chess: chess.o
	time $(LD) $(LDFLAGS) chess.o -lc86 -o chess

chess.o: chess.as
	time $(AS) $(ASFLAGS)  chess.as -o chess.o

chess.as: chess.i
	time $(CC) $(CFLAGS) chess.i chess.as

chess.i: chess.c
	time $(CPP) $(CPPFLAGS) chess.c -o chess.i

vga: vga.o
	time $(LD) $(LDFLAGS) vga.o -lc86 -o vga

vga.o: vga.as
	time $(AS) $(ASFLAGS)  vga.as -o vga.o

vga.as: vga.i
	time $(CC) $(CFLAGS) vga.i vga.as

vga.i: vga.c
	time $(CPP) $(CPPFLAGS) vga.c -o vga.i

cprintf.o: cprintf.as
	time $(AS) $(ASFLAGS)  cprintf.as -o cprintf.o

cprintf.as: cprintf.i
	time $(CC) $(CFLAGS) cprintf.i cprintf.as

cprintf.i: cprintf.c
	time $(CPP) $(CPPFLAGS) cprintf.c -o cprintf.i

clean:
	rm -f *.i *.o *.as test chess vga show_fonts

# end
